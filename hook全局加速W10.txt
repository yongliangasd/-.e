加速HOOK原字节   字节集

加速HOOK原字节 ＝ 汇编_读字节集 (GetProcAddress (GetModuleHandleA (“KERNEL32.dll”), “timeGetTime”) ＋ 十六到十 (“47”), 6)

.版本 2
.支持库 spec

.子程序 HOOK_加速Win10
.局部变量 函数地址, 整数型
.局部变量 HOOK地址, 整数型
.局部变量 跳回地址, 整数型
.局部变量 JMPaddr, 整数型
.局部变量 Code, 字节集
.局部变量 倍数, 字节集

函数地址 ＝ GetProcAddress (GetModuleHandleA (“KERNEL32.dll”), “timeGetTime”)  ' KERNEL32.DLL+B0728
HOOK地址 ＝ 函数地址 ＋ 十六到十 (“47”)
.判断开始 (读取配置 (“全局加速”) ＝ 0)
    汇编_写字节集 (HOOK地址, 加速HOOK原字节)
.默认

    跳回地址 ＝ HOOK地址 ＋ 6
    JMPaddr ＝ 申请内存 (100, 真)
    Code ＝ { 3, 4, 37, 0, 0, 0, 193, 224 } ＋ 取字节集左边 (到字节集 (读取配置 (“全局加速”)), 2)
    汇编_写字节集 (JMPaddr, Code)
    汇编_写字节集 (JMPaddr, 加速HOOK原字节)
    汇编_写字节集 (JMPaddr ＋ 取字节集长度 (Code) － 1, ASM_Jmp长跳 (JMPaddr ＋ 取字节集长度 (Code), 跳回地址 ＋ 1))
    汇编_写字节集 (HOOK地址, ASM_Jmp长跳 (HOOK地址, JMPaddr) ＋ { 144 })
.判断结束



.子程序 申请内存地址, 整数型, , 默认申请1024字节的内存
.参数 长度, 整数型, 可空
.参数 进程PID, 整数型, 可空
.局部变量 _局部变量1, 整数型
.局部变量 _局部变量2, 整数型

.如果真 (是否为空 (进程PID) ＝ 真)
    进程PID ＝ -1
.如果真结束
.如果真 (是否为空 (长度) ＝ 真)
    长度 ＝ 1024
.如果真结束
.如果 (进程PID ＝ -1)
    _局部变量2 ＝ _打开当前进程 ()
.否则
    _局部变量2 ＝ _打开进程 (2035711, 0, 进程PID)
.如果结束
_局部变量1 ＝ _DLL命令0A0100E3_VirtualAllocEx (_局部变量2, 0, 长度, 4096, 64)
_关闭对象 (_局部变量2)
返回 (_局部变量1)


.版本 2

.子程序 ASM_Jmp长跳, 字节集
.参数 参数原地址, 整数型
.参数 参数目标地址, 整数型

返回 ({ 233 } ＋ 到字节集 (到整数 (参数目标地址 － 参数原地址 － 5)))



.版本 2

.DLL命令 _DLL命令0A0100E3_VirtualAllocEx, 整数型, "kernel32.dll", "VirtualAllocEx"
    .参数 _参数1, 整数型
    .参数 _参数2, 整数型
    .参数 _参数3, 整数型
    .参数 _参数4, 整数型
    .参数 _参数5, 整数型


